@using Simulator.Client.HCPages.SimulationPlanneds.Cards
@using Simulator.Shared.Simulations

@if (Simulation != null)
{
    <MudCard>

        <MudStack Spacing="2">


            <MudStack Row=true Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                @if (!Simulation.IsSimulationRunning)
                {
                    <MudButton Variant=Variant.Filled Color=Color.Success OnClick="StartSimulation" Size="Size.Small" StartIcon="@Icons.Material.Rounded.PlayArrow">
                        Start
                    </MudButton>
                }
                else if (Simulation.IsSimulationRunning && !Simulation.IsSimulationPaused)
                {
                    <MudButton Variant=Variant.Filled Color=Color.Warning OnClick="PauseSimulation" Size="Size.Small" StartIcon="@Icons.Material.Rounded.Pause">
                        Pause
                    </MudButton>
                    <MudButton Variant=Variant.Filled Color=Color.Error OnClick="StopSimulation" Size="Size.Small" StartIcon="@Icons.Material.Rounded.Stop">
                        Stop
                    </MudButton>
                }
                else if (Simulation.IsSimulationRunning && Simulation.IsSimulationPaused)
                {
                    <MudButton Variant=Variant.Filled Color=Color.Success OnClick="ResumeSimulation" Size="Size.Small" StartIcon="@Icons.Material.Rounded.PlayArrow">
                        Resume
                    </MudButton>
                    <MudButton Variant=Variant.Filled Color=Color.Error OnClick="StopSimulation" Size="Size.Small" StartIcon="@Icons.Material.Rounded.Stop">
                        Stop
                    </MudButton>
                }

                @if (Simulation.IsSimulationRunning || Simulation.IsSimulationPaused)
                {
                    <MudButton Variant=Variant.Outlined Color=Color.Secondary OnClick="ResetSimulation" Size="Size.Small" StartIcon="@Icons.Material.Rounded.RestartAlt">
                        Reset
                    </MudButton>
                }
            </MudStack>

            <!-- INDICADOR OPCIONAL VA AQUÍ, DESPUÉS DE LOS BOTONES -->
            @if (Simulation.IsSimulationRunning)
            {
                <MudPaper Elevation="2" Class="pa-2 mb-2" Style="@(Simulation.IsSimulationPaused ? "background-color: #fff3e0;" : "background-color: #e8f5e9;")">
                    <div class="d-flex align-items-center">
                        @if (Simulation.IsSimulationPaused)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Pause" Color="Color.Warning" Class="mr-2" />
                            <MudText Typo="Typo.body2" Color="Color.Warning"><strong>PAUSED</strong></MudText>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.PlayArrow" Color="Color.Success" Class="mr-2" />
                            <MudText Typo="Typo.body2" Color="Color.Success"><strong>RUNNING</strong></MudText>
                        }
                        <MudSpacer />
                        <MudText Typo="Typo.body2">
                            <small>@Simulation.SimulationTime.ToString(@"hh\:mm\:ss")</small>
                        </MudText>
                    </div>
                </MudPaper>
            }
            @if (Simulation.Planned == null)
            {
                <MudText Typo="Typo.h6">Must load production plan</MudText>
            }
            else
            {
                <MudStack Row=true Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                    <MudText Typo=Typo.button Color="Color.Dark">@($"Init time: {Simulation.InitDate.ToString()}")</MudText>
                    <MudText Typo=Typo.button>@($"End time: {Simulation.EndDate.ToString()}")</MudText>


                </MudStack>

                <MudStack Row=true Justify="Justify.FlexStart" AlignItems="AlignItems.Center">

                    <MudText Typo=Typo.button>@($"Date: {Simulation.CurrentDate.ToShortDateString()}")</MudText>
                    <MudText Typo=Typo.button>@($"Current Shift: {Simulation.CurrentShift}")</MudText>
                    <MudText Typo=Typo.button>@($"Hour: {Simulation.CurrentDate.Hour}")</MudText>
                    <MudText Typo=Typo.button>@($"Minute: {Simulation.CurrentDate.Minute}")</MudText>
                    <MudText Typo=Typo.button>@($"Second: {Simulation.CurrentDate.Second}")</MudText>


                </MudStack>
                <MudGrid>
                    <MudItem xs="3">
                        <MudStack Spacing="2">
                            @foreach (var row in Simulation.BackBoneRawMaterialTanks)
                            {
                                <CardBackboneRawMaterialTank Tank=@row></CardBackboneRawMaterialTank>
                            }
                            @foreach (var row in Simulation.RawMaterialTank)
                            {
                                <CardRawMaterialTank Tank="@row">

                                </CardRawMaterialTank>

                            }
                        </MudStack>
                    </MudItem>
                    <MudItem xs="3">
                        @foreach (var row in Simulation.SKIDs)
                        {
                            <CardSkid SKID="@row">

                            </CardSkid>

                        }
                        @foreach (var row in Simulation.WIPProductTanks)
                        {
                            <CardWIPProductTank Tank="@row">

                            </CardWIPProductTank>

                        }
                        @foreach (var row in Simulation.MixerOrdered)
                        {
                            <CardMixer Mixer="@row">

                            </CardMixer>

                        }
                    </MudItem>
                    <MudItem xs="6">
                        @foreach (var row in Simulation.WIPSKIDTankOrdered)
                        {
                            <MudStack Row=true Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                <MudGrid>
                                    <MudItem xs="6">
                                        <CardWIPTankInletSKID Tank="@row">

                                        </CardWIPTankInletSKID>
                                    </MudItem>
                                    <MudItem xs="6">
                                        @if (row.Line != null)
                                        {
                                            <CardLine Line="@row.Line">

                                            </CardLine>
                                        }
                                    </MudItem>
                                </MudGrid>


                            </MudStack>
                        }
                        @foreach (var row in Simulation.WIPMixerTankOrdered)
                        {
                            <MudStack Row=true Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                <MudGrid>
                                    <MudItem xs="6">
                                        <CardWIPTankInletMIxer Tank="@row">

                                        </CardWIPTankInletMIxer>
                                    </MudItem>
                                    <MudItem xs="6">
                                        @if (row.Line != null)
                                        {
                                            <CardLine Line="@row.Line">

                                            </CardLine>
                                        }
                                    </MudItem>
                                </MudGrid>


                            </MudStack>

                        }
                    </MudItem>
                </MudGrid>

            }


        </MudStack>
    </MudCard>
}

@code {

    async Task StartSimulation()
    {
       await Simulation.RunSimulation();
    }

    void PauseSimulation()
    {
        Simulation.PauseSimulation();
    }

    void ResumeSimulation()
    {
        Simulation.ResumeSimulation();
    }

    void StopSimulation()
    {
        Simulation.StopSimulation();
    }

    void ResetSimulation()
    {
        Simulation.ResetSimulation();
    }

    protected override void OnInitialized()
    {
        Simulation.UpdateModel = StateHasChanged;
    }
}
