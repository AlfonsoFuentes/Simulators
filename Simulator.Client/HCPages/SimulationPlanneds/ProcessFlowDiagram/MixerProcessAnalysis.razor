@using static Simulator.Shared.Simulations.ProductionAnalyzers.ProductionAnalyzer

<div class="pa-4">
    <MudPaper Elevation="1" Class="pa-4 mb-4">
        <MudText Typo="Typo.h4" Class="mb-4">Production Capacity Analysis</MudText>

        @if (AnalysisResults != null && AnalysisResults.Any())
        {
            <!-- Estadísticas generales -->
            <MudPaper Elevation="2" Class="pa-4 mb-4">
                <MudText Typo="Typo.h6" Class="mb-3">Analysis Summary</MudText>
                <MudGrid>
                    <MudItem xs="12" sm="4">
                        <MudPaper Class="pa-3 text-center" Style="background-color: #e8f5e9;">
                            <MudText Typo="Typo.h5">@totalEquipment</MudText>
                            <MudText Typo="Typo.body2">Equipment</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudPaper Class="pa-3 text-center" Style="background-color: #e3f2fd;">
                            <MudText Typo="Typo.h5">@totalProducts</MudText>
                            <MudText Typo="Typo.body2">Products</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudPaper Class="pa-3 text-center" Style="background-color: #ffebee;">
                            <MudText Typo="Typo.h5">@productsUnableToProduce</MudText>
                            <MudText Typo="Typo.body2">Cannot Produce</MudText>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudPaper>

            <!-- Resultados por Equipos (Mixers y SKIDs) -->
            <MudExpansionPanels>
                @foreach (var equipmentResult in AnalysisResults)
                {
                    <MudExpansionPanel>
                        <TitleContent>
                            <div class="d-flex align-items-center">
                                <MudText Typo="Typo.h6">@equipmentResult.EquipmentName (@equipmentResult.EquipmentType)</MudText>
                                <MudSpacer />
                                <!-- Contadores de materiales únicos -->
                                @if (equipmentResult.UniqueConnectedMaterials.Any())
                                {
                                    <MudChip T="string" Color="Color.Success" Variant="Variant.Outlined" Size="Size.Small">
                                        ✓ @equipmentResult.UniqueConnectedMaterials.Count Connected
                                    </MudChip>
                                }
                                @if (equipmentResult.UniqueMissingMaterials.Any())
                                {
                                    <MudChip T="string" Color="Color.Warning" Variant="Variant.Outlined" Size="Size.Small" Class="ml-2">
                                        ✗ @equipmentResult.UniqueMissingMaterials.Count Missing
                                    </MudChip>
                                }
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <MudPaper Elevation="1" Class="pa-3 mb-3">
                                <MudGrid>
                                    @if (equipmentResult.UniqueConnectedMaterials.Any())
                                    {
                                        <MudItem xs="12">
                                            <MudText Typo="Typo.body2" Color="Color.Success" Class="mb-2">
                                                <strong>Connected Materials (@equipmentResult.UniqueConnectedMaterials.Count):</strong>
                                            </MudText>
                                            <div class="d-flex flex-wrap gap-1">
                                                @foreach (var material in equipmentResult.UniqueConnectedMaterials)
                                                {
                                                    <MudTooltip Text="@($"{material.EquipmentType}: {material.EquipmentName}")">
                                                        <MudChip T="string" Color="Color.Success"
                                                                 Variant="Variant.Filled"
                                                                 Size="Size.Small">
                                                            @material.MaterialName
                                                        </MudChip>
                                                    </MudTooltip>
                                                }
                                            </div>
                                        </MudItem>
                                    }

                                    @if (equipmentResult.UniqueMissingMaterials.Any())
                                    {
                                        <MudItem xs="12" Class="mt-3">
                                            <MudText Typo="Typo.body2" Color="Color.Error" Class="mb-2">
                                                <strong>Missing Materials (@equipmentResult.UniqueMissingMaterials.Count):</strong>
                                            </MudText>
                                            <div class="d-flex flex-wrap gap-1">
                                                @foreach (var material in equipmentResult.UniqueMissingMaterials)
                                                {
                                                    <MudChip T="string" Color="Color.Warning"
                                                             Variant="Variant.Filled"
                                                             Size="Size.Small">
                                                        @material.MaterialName
                                                    </MudChip>
                                                }
                                            </div>
                                        </MudItem>
                                    }
                                </MudGrid>
                            </MudPaper>
                            @{
                                var producibleProducts = equipmentResult.ProductResults.Count(p => p.CanProduce);
                                var totalProducts = equipmentResult.ProductResults.Count;
                            }
                            <MudPaper Elevation="0" Class="pa-3 mt-3" Style="border: 1px solid #e0e0e0; border-radius: 4px;">
                                <MudText Typo="Typo.body2" Class="mb-2">
                                    <strong>Product Status (@producibleProducts/@totalProducts can be produced):</strong>
                                </MudText>

                                <div class="d-flex flex-wrap gap-1">
                                    @foreach (var product in equipmentResult.ProductResults)
                                    {
                                        @if (product.CanProduce)
                                        {
                                            <MudChip T="string" Color="Color.Success"
                                                     Variant="Variant.Filled"
                                                     Size="Size.Small">
                                                <div class="d-flex align-items-center">
                                                    <MudIcon Icon="@Icons.Material.Filled.Check"
                                                             Size="Size.Small"
                                                             Class="mr-1" />
                                                    <span>@product.ProductName</span>
                                                </div>
                                            </MudChip>
                                        }
                                        else
                                        {
                                            <MudChip T="string" Color="Color.Warning"
                                                     Variant="Variant.Filled"
                                                     Size="Size.Small">
                                                <div class="d-flex align-items-center">
                                                    <MudIcon Icon="@Icons.Material.Filled.Close"
                                                             Size="Size.Small"
                                                             Class="mr-1" />
                                                    <span>@product.ProductName</span>
                                                </div>
                                            </MudChip>
                                        }
                                    }
                                </div>
                            </MudPaper>
                        </ChildContent>
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
        }
        else
        {
            <MudPaper Elevation="2" Class="pa-8 text-center">
                <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Large" Class="mb-4" />
                <MudText Typo="Typo.h6" Class="mb-2">No Analysis Results</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    No production analysis results available. Please run the analysis first.
                </MudText>
            </MudPaper>
        }
    </MudPaper>
</div>

@code {

    [Inject] public ISnackbar? Snackbar { get; set; }

    // Cambios en las estadísticas
    private int totalEquipment => AnalysisResults?.Count ?? 0;
    private int totalProducts => AnalysisResults?.Sum(m => m.ProductResults.Count) ?? 0;
    private int productsUnableToProduce => AnalysisResults?.Sum(m => m.ProductResults.Count(p => !p.CanProduce)) ?? 0;

    protected override void OnParametersSet()
    {
        StateHasChanged();
    }

    [Parameter]
    public NewSimulation Simulation { get; set; } = new();

    // Cambio: Ahora usamos EquipmentAnalysisResults en lugar de MixerAnalysisResults
    public List<EquipmentAnalysisResult>? AnalysisResults => Simulation?.EquipmentAnalysisResults;
}