<MudExpansionPanel Text="@Product.ProductName" ExpandedChanged="OnProductExpandedChanged">
    @if (IsProductExpanded)
    {
        <MudCardContent>
            <!-- Status chip -->
            <div class="d-flex align-center mb-3">
                <MudChip T="string"
                         Color="@(Product.CanProduce ? Color.Success : Color.Error)"
                         Variant="Variant.Filled">
                    @(Product.CanProduce ? "Can Produce" : "Cannot Produce")
                </MudChip>
                @if (!string.IsNullOrEmpty(Product.Reason))
                {
                    <MudText Class="ml-2">- @Product.Reason</MudText>
                }
            </div>

            <!-- Missing materials -->
            @if (Product.MissingMaterials.Any())
            {
                <MissingMaterialsList Materials="Product.MissingMaterials" />
            }

            <!-- Production details and steps -->
            @if (Product.CanProduce && EquipmentResult.BackboneCapabilities.TryGetValue(Product.ProductName, out var capabilities))
            {
                var capability = capabilities.FirstOrDefault(c => c.EquipmentName == EquipmentResult.EquipmentName);

                @if (capability != null)
                {
                    <MudDivider Class="my-3" />

                    <MudGrid Class="production-details-grid">
                        <MudItem xs="12" sm="3">
                            <MudText><strong>Capacity:</strong> @capability.Capacity.GetValue(MassUnits.KiloGram) Kg</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="3">
                            <MudText><strong>Batch Cycle Time:</strong> @capability.BatchTime.GetValue(TimeUnits.Minute).ToString("N1") min</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="3">
                            <MudText><strong>Transfer Time:</strong> @capability.TransferTime.GetValue(TimeUnits.Minute).ToString("N1") min</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="3">
                            <MudText><strong>Total Time:</strong> @capability.TotalTime.GetValue(TimeUnits.Minute).ToString("N1") min</MudText>
                        </MudItem>
                    </MudGrid>

                  
                    <!-- Production steps -->
                    @if (capability.StepTimes.Any())
                    {
                        <MudDivider Class="my-3" />
                        <MudExpansionPanel Text="Production Steps" MaxHeight="600">
                            <ProductionStepsTable StepDetails="@capability.StepTimes" />
                        </MudExpansionPanel>
                    }
                }
            }
        </MudCardContent>
    }
    else
    {
        <MudCardContent>
            <MudText Color="Color.Secondary">Click to load product details...</MudText>
        </MudCardContent>
    }
</MudExpansionPanel>

@code {
    [Parameter] public ProductAnalysisResult Product { get; set; } = new();
    [Parameter] public EquipmentAnalysisResult EquipmentResult { get; set; } = new();

    private bool IsProductExpanded { get; set; } = false;

    private async Task OnProductExpandedChanged(bool expanded)
    {
        IsProductExpanded = expanded;

        if (expanded)
        {
            await Task.Delay(10);
            StateHasChanged();
        }
    }
}