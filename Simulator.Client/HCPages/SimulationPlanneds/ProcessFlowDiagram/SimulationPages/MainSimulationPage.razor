@using Simulator.Client.HCPages.SimulationPlanneds.Cards
@using Simulator.Shared.Simulations

@if (Simulation != null)
{
    <MudCard>

        <MudStack Spacing="2">


            <MudStack Row=true Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                @if (!Simulation.IsSimulationRunning)
                {
                    <MudButton Variant=Variant.Filled Color=Color.Success OnClick="StartSimulation" Size="Size.Small" StartIcon="@Icons.Material.Rounded.PlayArrow">
                        Start
                    </MudButton>
                }
                else if (Simulation.IsSimulationRunning && !Simulation.IsSimulationPaused)
                {
                    <MudButton Variant=Variant.Filled Color=Color.Warning OnClick="PauseSimulation" Size="Size.Small" StartIcon="@Icons.Material.Rounded.Pause">
                        Pause
                    </MudButton>
                    <MudButton Variant=Variant.Filled Color=Color.Error OnClick="StopSimulation" Size="Size.Small" StartIcon="@Icons.Material.Rounded.Stop">
                        Stop
                    </MudButton>
                }
                else if (Simulation.IsSimulationRunning && Simulation.IsSimulationPaused)
                {
                    <MudButton Variant=Variant.Filled Color=Color.Success OnClick="ResumeSimulation" Size="Size.Small" StartIcon="@Icons.Material.Rounded.PlayArrow">
                        Resume
                    </MudButton>
                    <MudButton Variant=Variant.Filled Color=Color.Error OnClick="StopSimulation" Size="Size.Small" StartIcon="@Icons.Material.Rounded.Stop">
                        Stop
                    </MudButton>
                }

                @if (Simulation.IsSimulationRunning || Simulation.IsSimulationPaused)
                {
                    <MudButton Variant=Variant.Outlined Color=Color.Secondary OnClick="ResetSimulation" Size="Size.Small" StartIcon="@Icons.Material.Rounded.RestartAlt">
                        Reset
                    </MudButton>
                }
            </MudStack>

            <!-- INDICADOR OPCIONAL VA AQUÍ, DESPUÉS DE LOS BOTONES -->
            @if (Simulation.IsSimulationRunning)
            {
                <MudPaper Elevation="2" Class="pa-2 mb-2" Style="@(Simulation.IsSimulationPaused ? "background-color: #fff3e0;" : "background-color: #e8f5e9;")">
                    <div class="d-flex align-items-center">
                        @if (Simulation.IsSimulationPaused)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Pause" Color="Color.Warning" Class="mr-2" />
                            <MudText Typo="Typo.body2" Color="Color.Warning"><strong>PAUSED</strong></MudText>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.PlayArrow" Color="Color.Success" Class="mr-2" />
                            <MudText Typo="Typo.body2" Color="Color.Success"><strong>RUNNING</strong></MudText>
                        }
                        <MudSpacer />
                        <MudText Typo="Typo.body2">
                            <small>@Simulation.SimulationTime.ToString(@"hh\:mm\:ss")</small>
                        </MudText>
                    </div>
                </MudPaper>
            }
            @if (Simulation.Planned == null)
            {
                <MudText Typo="Typo.h6">Must load production plan</MudText>
            }
            else
            {
               
               
                <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-1">
                    <MudTabPanel Text="Cards">
                        <SimulationPageCards Simulation="@Simulation"></SimulationPageCards>
                    </MudTabPanel>
                    <MudTabPanel Text="Results">
                        <SimulationPageReports Simulation="@Simulation"></SimulationPageReports>
                    </MudTabPanel>
                </MudTabs>
            }


        </MudStack>
    </MudCard>
}

@code {
    [Parameter]
    public NewSimulation Simulation { get; set; } = null!;
    async Task StartSimulation()
    {
        await Simulation.RunSimulation();
    }

    void PauseSimulation()
    {
        Simulation.PauseSimulation();
    }

    void ResumeSimulation()
    {
        Simulation.ResumeSimulation();
    }

    void StopSimulation()
    {
        Simulation.StopSimulation();
    }

    void ResetSimulation()
    {
        Simulation.ResetSimulation();
    }

    protected override void OnInitialized()
    {
        Simulation.UpdateModel = StateHasChanged;
    }
}
