<!-- BackboneProductCard.razor -->
<MudExpansionPanel>
    <TitleContent>
        <div class="d-flex align-items-center w-100">
            <MudIcon Icon="@Icons.Material.Filled.Inventory2" Color="Color.Primary" Class="mr-2" />
            <MudText Typo="Typo.h6" Class="flex-grow-1">@ProductName</MudText>
            <MudChip T="string" Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small">
                @Capabilities.Count Equipment@(Capabilities.Count != 1 ? "s" : "")
            </MudChip>
        </div>
    </TitleContent>
    <ChildContent>
        <MudGrid>
            @foreach (var capability in Capabilities)
            {
              
                <MudItem xs="12" sm="6" md="4">
                <MudPaper Elevation="2" Class="pa-3 mb-3" Style="@(GetBorderStyle(capability.CanProduce))">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <div>
                                <MudText Typo="Typo.body1" Color="Color.Primary">
                                    <strong>@capability.EquipmentName</strong>
                                </MudText>
                                @if (capability.CanProduce)
                                {
                                    <MudChip T="string" Color="Color.Success" Size="Size.Small" Class="mt-1">
                                        <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" Class="mr-1" />
                                        Ready
                                    </MudChip>
                                }
                                else
                                {
                                    <MudChip T="string" Color="Color.Error" Size="Size.Small" Class="mt-1">
                                        <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Small" Class="mr-1" />
                                        Issues
                                    </MudChip>
                                }
                            </div>
                        </div>

                        <!-- Métricas principales -->
                        <div class="d-flex justify-content-between mb-2">
                            <div class="text-center" Style="flex: 1;">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    <small>Capacity</small>
                                </MudText>
                                <MudText Typo="Typo.body1" Color="Color.Primary">
                                    <strong>@capability.Capacity.ToString("F1")</strong>
                                </MudText>
                            </div>
                            <div class="text-center" Style="flex: 1;">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    <small>Batch Time</small>
                                </MudText>
                                <MudText Typo="Typo.body1" Color="Color.Primary">
                                    <strong>@capability.BatchTime.ToString("F1")</strong>
                                </MudText>
                            </div>
                        </div>

                        <!-- Tiempo de transferencia -->
                        <div class="mb-2">
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                <small><strong>Transfer Time:</strong> @capability.TransferTime.ToString("F1")</small>
                            </MudText>
                        </div>

                        <!-- Detalle de pasos -->
                        @if (capability.StepTimes.Any())
                        {
                            <div class="mt-2">
                                <MudButton Color="Color.Info" 
                                           Variant="Variant.Outlined" 
                                           Size="Size.Small" 
                                           FullWidth="true"
                                           OnClick="@(e => ToggleStepDetails(capability))">
                                    <div class="d-flex align-items-center justify-content-center w-100">
                                        <MudIcon Icon="@(IsStepExpanded(capability) ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)" 
                                                 Size="Size.Small" 
                                                 Class="mr-1" />
                                        <span>@(IsStepExpanded(capability) ? "Hide" : "Show") Steps (@capability.StepTimes.Count)</span>
                                    </div>
                                </MudButton>
                                
                                @if (IsStepExpanded(capability))
                                {
                                    <div class="mt-2">
                                        <StepTimesDetail CapabilityInfo="@capability" />
                                    </div>
                                }
                            </div>
                        }

                        <!-- Materiales faltantes -->
                        @if (!capability.CanProduce && capability.MissingMaterials.Any())
                        {
                            <div class="mt-2">
                                <MudText Typo="Typo.body2" Color="Color.Error" Class="mb-1">
                                    <small><strong>Missing Materials:</strong></small>
                                </MudText>
                                <div class="d-flex flex-wrap gap-1">
                                    @foreach (var material in capability.MissingMaterials.Take(3))
                                    {
                                        <MudChip T="string" Color="Color.Error" Size="Size.Small">
                                            <small>@material</small>
                                        </MudChip>
                                    }
                                    @if (capability.MissingMaterials.Count > 3)
                                    {
                                        <MudChip T="string"  Color="Color.Error" Size="Size.Small">
                                            <small>+@(capability.MissingMaterials.Count - 3) more</small>
                                        </MudChip>
                                    }
                                </div>
                            </div>
                        }
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    </ChildContent>
</MudExpansionPanel>

@code {
    [Parameter]
    public string ProductName { get; set; } = string.Empty;
    
    [Parameter]
    public List<EquipmentCapabilityInfo> Capabilities { get; set; } = new();
    
    // Diccionario para rastrear qué capacidades tienen detalles expandidos
    private Dictionary<string, bool> expandedSteps = new();
    
    private void ToggleStepDetails(EquipmentCapabilityInfo capability)
    {
        var key = $"{ProductName}_{capability.EquipmentName}";
        if (expandedSteps.ContainsKey(key))
        {
            expandedSteps[key] = !expandedSteps[key];
        }
        else
        {
            expandedSteps[key] = true;
        }
        StateHasChanged();
    }
    
    private bool IsStepExpanded(EquipmentCapabilityInfo capability)
    {
        var key = $"{ProductName}_{capability.EquipmentName}";
        return expandedSteps.ContainsKey(key) && expandedSteps[key];
    }
    private string GetBorderStyle(bool canProduce)
    {
        return $"border-left: 4px solid {(canProduce ? "#4caf50" : "#f44336")};";
    }
   
}