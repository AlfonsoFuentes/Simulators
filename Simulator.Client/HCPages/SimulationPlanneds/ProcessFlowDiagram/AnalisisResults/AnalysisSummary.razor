<!-- AnalysisSummary.razor -->
<MudPaper Elevation="2" Class="pa-4 mb-4">
    <MudText Typo="Typo.h6" Class="mb-3">Analysis Summary</MudText>
    <MudGrid>
        <MudItem xs="12" sm="4">
            <MudPaper Class="pa-3 text-center" Style="background-color: #e8f5e9;">
                <MudText Typo="Typo.h5">@totalEquipment</MudText>
                <MudText Typo="Typo.body2">Equipment</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="4">
            <MudPaper Class="pa-3 text-center" Style="background-color: #e3f2fd;">
                <MudText Typo="Typo.h5">@totalProducts</MudText>
                <MudText Typo="Typo.body2">Products</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="4">
            <MudPaper Class="pa-3 text-center" Style="background-color: #ffebee;">
                <MudText Typo="Typo.h5">@productsUnableToProduce</MudText>
                <MudText Typo="Typo.body2">Cannot Produce</MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    [Parameter]
    public List<EquipmentAnalysisResult> AnalysisResults { get; set; } = new();

    private int totalEquipment => AnalysisResults?.Count ?? 0;
    private int totalProducts => AnalysisResults?.Sum(m => m.ProductResults.Count) ?? 0;
    private int productsUnableToProduce => AnalysisResults?.Sum(m => m.ProductResults.Count(p => !p.CanProduce)) ?? 0;
}