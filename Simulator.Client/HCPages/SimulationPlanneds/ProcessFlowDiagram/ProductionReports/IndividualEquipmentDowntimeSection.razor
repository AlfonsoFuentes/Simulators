<!-- IndividualEquipmentDowntimeSection.razor -->
<MudExpansionPanel>
    <TitleContent>
        <div class="d-flex align-items-center">
            <MudIcon Icon="@GetEquipmentIcon()" Color="@GetEquipmentColor()" Class="mr-2" />
            <MudText Typo="Typo.h6">@Equipment.Name</MudText>
            <MudSpacer />
            <MudChip T="string" Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small">
                @equipmentEvents.Count Events
            </MudChip>
            <MudChip T="string" Color="Color.Error" Variant="Variant.Outlined" Size="Size.Small" Class="ml-2">
                @FormatDuration(equipmentTotalDowntime)
            </MudChip>
        </div>
    </TitleContent>
    <ChildContent>
        <MudTable T="NewBaseEquipmentEventArgs" Items="@equipmentEvents" Dense="true" Hover="true">
            <HeaderContent>
                <MudTh>Description</MudTh>
                <MudTh>Start Time</MudTh>
                <MudTh>End Time</MudTh>
                <MudTh>Duration</MudTh>
                <MudTh>Status</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Start Time">@context.StartDate.ToString("yyyy-MM-dd HH:mm:ss")</MudTd>
                <MudTd DataLabel="End Time">
                    @if (context.EventStatus == EventStatus.Closed)
                    {
                        @context.EndDate.ToString("yyyy-MM-dd HH:mm:ss")
                    }
                    else
                    {
                        <MudChip T="string" Color="Color.Warning" Variant="Variant.Filled" Size="Size.Small">
                            Active
                        </MudChip>
                    }
                </MudTd>
                <MudTd DataLabel="Duration">
                    @if (context.EventStatus == EventStatus.Closed)
                    {
                        @FormatDuration(context.Duration)
                    }
                    else
                    {
                        @FormatDuration(DateTime.Now - context.StartDate)
                    }
                </MudTd>
                <MudTd DataLabel="Status">
                    @if (context.EventStatus == EventStatus.Open)
                    {
                        <MudChip T="string" Color="Color.Warning" Variant="Variant.Filled" Size="Size.Small">
                            Active
                        </MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Color="Color.Success" Variant="Variant.Filled" Size="Size.Small">
                            Closed
                        </MudChip>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>

        <!-- Estadísticas del equipo -->
        <MudPaper Elevation="0" Class="pa-3 mt-3" Style="background-color: #f5f5f5; border-radius: 4px;">
            <MudGrid>
                <MudItem xs="12" sm="4">
                    <MudText Typo="Typo.body2">
                        <strong>Active Events:</strong> @activeEvents.Count
                    </MudText>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudText Typo="Typo.body2">
                        <strong>Closed Events:</strong> @closedEvents.Count
                    </MudText>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudText Typo="Typo.body2">
                        <strong>Total Downtime:</strong> @FormatDuration(equipmentTotalDowntime)
                    </MudText>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </ChildContent>
</MudExpansionPanel>

@code {
    [Parameter]
    public NewBaseEquipment Equipment { get; set; } = null!;

    [Parameter]
    public NewSimulation Simulation { get; set; } = new();

    private List<NewBaseEquipmentEventArgs> equipmentEvents => Simulation?.GetAllEquipmentEvents()
        .Where(e => e.Equipment?.Id == Equipment.Id)
        .OrderByDescending(e => e.StartDate)
        .ToList() ?? new List<NewBaseEquipmentEventArgs>();

    private List<NewBaseEquipmentEventArgs> activeEvents => equipmentEvents
        .Where(e => e.EventStatus == EventStatus.Open)
        .ToList();

    private List<NewBaseEquipmentEventArgs> closedEvents => equipmentEvents
        .Where(e => e.EventStatus == EventStatus.Closed)
        .ToList();


    private TimeSpan equipmentTotalDowntime => TimeSpan.FromTicks(closedEvents.Sum(e => e.Duration.Ticks));
    private string FormatDuration(TimeSpan duration)
    {
        if (duration == TimeSpan.Zero) return "0s";
        if (duration.TotalSeconds < 60) return $"{duration.TotalSeconds:F0}s";
        if (duration.TotalMinutes < 60) return $"{duration.TotalMinutes:F1}m";
        return $"{duration.TotalHours:F1}h";
    }

    private Color GetEquipmentColor()
    {
        return Equipment.EquipmentType switch
        {
            ProccesEquipmentType.Line => Color.Primary,
            ProccesEquipmentType.Tank => Color.Success,
            ProccesEquipmentType.Pump => Color.Warning,
            ProccesEquipmentType.Mixer => Color.Error,
            ProccesEquipmentType.ContinuousSystem => Color.Info,
            ProccesEquipmentType.Operator => Color.Secondary,
            _ => Color.Default
        };
    }

    private string GetEquipmentIcon()
    {
        return Equipment.EquipmentType switch
        {
            ProccesEquipmentType.Line => Icons.Material.Filled.LinearScale,
            ProccesEquipmentType.Tank => Icons.Material.Filled.InvertColors,
            ProccesEquipmentType.Pump => Icons.Material.Filled.Settings,
            ProccesEquipmentType.Mixer => Icons.Material.Filled.Blender,
            ProccesEquipmentType.ContinuousSystem => Icons.Material.Filled.DeviceHub,
            ProccesEquipmentType.Operator => Icons.Material.Filled.Person,
            _ => Icons.Material.Filled.Help
        };
    }
}