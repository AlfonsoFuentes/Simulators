<!-- EquipmentTypeDowntimeSection.razor -->
<MudExpansionPanel>
    <TitleContent>
        <div class="d-flex align-items-center">
            <MudText Typo="Typo.h6">@EquipmentType</MudText>
            <MudSpacer />
            <MudChip T="string" Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small">
                @typeEvents.Count Events
            </MudChip>
            <MudChip T="string" Color="Color.Error" Variant="Variant.Outlined" Size="Size.Small" Class="ml-2">
                @FormatDuration(typeTotalDowntime)
            </MudChip>
        </div>
    </TitleContent>
    <ChildContent>
        <MudTable T="NewBaseEquipmentEventArgs" Items="@typeEvents" Dense="true" Hover="true">
            <HeaderContent>
                <MudTh>Equipment</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Start Time</MudTh>
                <MudTh>End Time</MudTh>
                <MudTh>Duration</MudTh>
                <MudTh>Status</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Equipment">@context.EquipmentName</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="Start Time">@context.StartDate.ToString("HH:mm:ss")</MudTd>
                <MudTd DataLabel="End Time">
                    @(context.EventStatus == EventStatus.Closed ? context.EndDate.ToString("HH:mm:ss") : "Active")
                </MudTd>
                <MudTd DataLabel="Duration">
                    @if (context.EventStatus == EventStatus.Closed)
                    {
                        @FormatDuration(context.Duration)
                    }
                    else
                    {
                        var currentDuration = Simulation.CurrentDate - context.StartDate;
                        @FormatDuration(currentDuration)
                    }
                </MudTd>
                <MudTd DataLabel="Status">
                    @if (context.EventStatus == EventStatus.Open)
                    {
                        <MudChip T="string" Color="Color.Warning" Variant="Variant.Filled" Size="Size.Small">
                            Active
                        </MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Color="Color.Success" Variant="Variant.Filled" Size="Size.Small">
                            Closed
                        </MudChip>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    </ChildContent>
</MudExpansionPanel>

@code {
    [Parameter]
    public string EquipmentType { get; set; } = string.Empty;
    
    [Parameter]
    public NewSimulation Simulation { get; set; } = new();

    private List<NewBaseEquipmentEventArgs> typeEvents => Simulation?.GetAllEquipmentEvents()
        .Where(e => e.EquipmentType.ToString() == EquipmentType)
        .OrderByDescending(e => e.StartDate)
        .ToList() ?? new List<NewBaseEquipmentEventArgs>();
    private TimeSpan typeTotalDowntime => TimeSpan.FromTicks(typeEvents.Where(e => e.EventStatus == EventStatus.Closed).Sum(e => e.Duration.Ticks));


    private string FormatDuration(TimeSpan duration)
    {
        if (duration == TimeSpan.Zero) return "0s";
        if (duration.TotalSeconds < 60) return $"{duration.TotalSeconds:F0}s";
        if (duration.TotalMinutes < 60) return $"{duration.TotalMinutes:F1}m";
        return $"{duration.TotalHours:F1}h";
    }
}