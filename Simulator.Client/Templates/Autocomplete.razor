@using Simulator.Client.Services.Authentications
@using Simulator.Client.Services.Identities.Accounts
@using Simulator.Client.Services.Identities.Authentications
@using Simulator.Client.Services.Identities.Users
@using Simulator.Client.Services.Interceptor
@using Simulator.Client.Services.Navigations
@using Simulator.Client.Services.SnackBars
@typeparam TValue
<MudAutocomplete T="TValue" Value="Value" ValueChanged=OnValueChanged
                 Margin="Margin.Dense" Variant=Variant.Outlined
                 Label="@Label" Clearable="@Clearable" Disabled="@Disable"
                 For=@For
                 SearchFunc="@SearchFunc" ToStringFunc="@ToStringFunc" />


@code {
    [Parameter]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public TValue Value { get; set; } = default(TValue)!;
    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }

    [Parameter]
    public bool Disable { get; set; } = false;
    [Parameter]
    public bool Clearable { get; set; } = true;
    [Parameter]
    public Expression<Func<TValue>>? For { get; set; }
    [Parameter]
    public EventCallback<TValue> ChangeItem { get; set; }
    [Parameter]
    public EventCallback ValidateAsync { get; set; }
    [Parameter]
    public EventCallback PriorChange { get; set; }
    [Parameter]
    public EventCallback Change { get; set; }


    async Task OnValueChanged(TValue value)
    {
        Value = value;
        if (PriorChange.HasDelegate)
            await PriorChange.InvokeAsync();
        if (ValueChanged.HasDelegate)
            await ValueChanged.InvokeAsync(Value);
        if (Change.HasDelegate)
            await Change.InvokeAsync();
        if (ChangeItem.HasDelegate)
            await ChangeItem.InvokeAsync(Value);
        if (ValidateAsync.HasDelegate)
            await ValidateAsync.InvokeAsync();
    }
    [Parameter]
    public Func<TValue?, string?> ToStringFunc { get; set; } = null!;
    [Parameter]
    public Func<string?, CancellationToken, Task<IEnumerable<TValue>>?>? SearchFunc { get; set; }

}
