@using Simulator.Client.Services.Authentications
@using Simulator.Client.Services.Identities.Accounts
@using Simulator.Client.Services.Identities.Authentications
@using Simulator.Client.Services.Identities.Users
@using Simulator.Client.Services.Interceptor
@using Simulator.Client.Services.Navigations
@using Simulator.Client.Services.SnackBars
@typeparam TValue
<MudStack Row=true AlignItems="AlignItems.Baseline" Justify="Justify.SpaceBetween" Style="width:100%">

    <MudAutocomplete T="TValue" Value="Value" ValueChanged=OnValueChanged
                     Margin="Margin.Dense" Variant=Variant.Outlined
                     Label="@Label" Clearable="@Clearable" Disabled="@Disable"
                     For=@For
                     SearchFunc="@SearchFunc" ToStringFunc="@ToStringFunc" />
    <IconButton ToolTip="@ToolTip" Icon="@Icon" Variant=Variant.Outlined OnClick="ButtonClick"></IconButton>
</MudStack>

@code {
    [Parameter]
    public bool Disable { get; set; } = false;
    [Parameter]
    public bool Clearable { get; set; } = true;
   
    [Parameter]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public TValue Value { get; set; } = default(TValue)!;
    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }
    [Parameter]
    public EventCallback ValidateAsync { get; set; }
    [Parameter]
    public EventCallback Change { get; set; }
    [Parameter]
    public Expression<Func<TValue>>? For { get; set; }
    [Parameter]
    public Func<TValue, string>? Property { get; set; }
    [Parameter]
    public EventCallback ButtonClick { get; set; }
    [Parameter]
    public string Icon { get; set; } = string.Empty;
    [Parameter]
    public string ToolTip { get; set; } = string.Empty;
    async Task OnValueChanged(TValue value)
    {
        Value = value;
        if (ValueChanged.HasDelegate)
            await ValueChanged.InvokeAsync(Value);
        if (Change.HasDelegate)
            await Change.InvokeAsync();
        if (ValidateAsync.HasDelegate)
            await ValidateAsync.InvokeAsync();
    }
    // Método auxiliar para manejar la visualización del texto
  
    [Parameter]
    public Func<TValue?, string?> ToStringFunc { get; set; } = null!;
    [Parameter]
    public Func<string?, CancellationToken, Task<IEnumerable<TValue>>?>? SearchFunc { get; set; }
}
