@using Simulator.Client.Services.Authentications
@using Simulator.Client.Services.Identities.Accounts
@using Simulator.Client.Services.Identities.Authentications
@using Simulator.Client.Services.Identities.Users
@using Simulator.Client.Services.Interceptor
@using Simulator.Client.Services.Navigations
@using Simulator.Client.Services.SnackBars
<MudNumericField Immediate="true"
                 Label="@Label"
                 T="int"
                 Value="@Value"
                 Variant="Variant.Outlined"
                 Margin="Margin.Dense"
                 ValueChanged="OnValueChanged"
                 For="@For"
                 HideSpinButtons=@HideSpinButtons></MudNumericField>

@code {
    [Parameter]
    public bool HideSpinButtons { get; set; } = true;
    [Parameter]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public int Value { get; set; }
    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }
    [Parameter]
    public EventCallback ValidateAsync { get; set; }
    [Parameter]
    public EventCallback Change { get; set; }
    [Parameter]
    public Expression<Func<int>>? For { get; set; }
    async Task OnValueChanged(int value)
    {
        Value = value;
        if (ValueChanged.HasDelegate)
            await ValueChanged.InvokeAsync(Value);
        if (Change.HasDelegate)
            await Change.InvokeAsync();
        if (ValidateAsync.HasDelegate)
            await ValidateAsync.InvokeAsync();
    }
}
