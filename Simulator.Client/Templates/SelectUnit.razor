@using UnitSystem
<MudStack Row=true>
    <MudNumericField Immediate="true"
                     Label="@Label"
                     T="double"
                     Value="@Value.Value"
                     Variant="Variant.Outlined"
                     Margin="Margin.Dense"
                     ValueChanged="OnValueChanged"
                     For="@For"
                     Disabled="@Disabled"
                     HideSpinButtons=@HideSpinButtons></MudNumericField>
    <MudSelect Value="Value.Unit"
               ValueChanged="UnitChanged"
               Variant="Variant.Outlined"
               T="UnitMeasure"
               Margin="Margin.Dense"
               Dense="true">
        @foreach (var row in Value.UnitsList)
        {
            <MudSelectItem Value="row">@row.Symbol</MudSelectItem>
        }
    </MudSelect>

</MudStack>

@code {
    [Parameter]
    public bool Disabled { get; set; } = false;
    [Parameter]
    public bool HideSpinButtons { get; set; } = true;
    [Parameter]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public Amount Value { get; set; } = null!;
    [Parameter]
    public EventCallback<Amount> ValueChanged { get; set; }
    [Parameter]
    public EventCallback ValidateAsync { get; set; }
    [Parameter]
    public EventCallback Change { get; set; }
    [Parameter]
    public Expression<Func<double>>? For { get; set; }
    async Task OnValueChanged(double value)
    {
        Value.Value = value;
        if (ValueChanged.HasDelegate)
            await ValueChanged.InvokeAsync(Value);
        if (Change.HasDelegate)
            await Change.InvokeAsync();
        if (ValidateAsync.HasDelegate)
            await ValidateAsync.InvokeAsync();
    }

    async Task UnitChanged(UnitMeasure unit)
    {
        Value.Unit = unit;
        await ValueChanged.InvokeAsync(Value);

    }
}
