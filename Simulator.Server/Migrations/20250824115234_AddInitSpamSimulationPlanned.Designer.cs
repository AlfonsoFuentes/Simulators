// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Simulator.Server.Implementations.Databases;

#nullable disable

namespace Simulator.Server.Migrations
{
    [DbContext(typeof(BlazorHeroContext))]
    [Migration("20250824115234_AddInitSpamSimulationPlanned")]
    partial class AddInitSpamSimulationPlanned
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LineSKU", b =>
                {
                    b.Property<Guid>("LinesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SKUsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LinesId", "SKUsId");

                    b.HasIndex("SKUsId");

                    b.ToTable("LineSKU");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.BackBoneStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BackBoneStepType")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<Guid?>("RawMaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TimeUnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TimeValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("RawMaterialId");

                    b.ToTable("BackBoneSteps");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.BaseEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForWashing")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MainProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainProcessId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.Conector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("ToId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("Conectors");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.EquipmentPlannedDownTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseEquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("BaseEquipmentId");

                    b.ToTable("EquipmentPlannedDownTimes");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.LinePlanned", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ShiftType")
                        .HasColumnType("int");

                    b.Property<Guid>("SimulationPlannedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WIPLevelUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("WIPLevelValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("SimulationPlannedId");

                    b.ToTable("LinePlanneds");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForWashing")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("M_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaterialType")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PhysicalState")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategory")
                        .HasColumnType("int");

                    b.Property<string>("SAPName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.MaterialEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CapacityUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CapacityValue")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMixer")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("ProccesEquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProccesEquipmentId");

                    b.ToTable("MaterialEquipments");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.MixerPlanned", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BackBoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BackBoneStepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentMixerState")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MixerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MixerLevelUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MixerLevelValue")
                        .HasColumnType("float");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProducingToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SimulationPlannedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BackBoneId");

                    b.HasIndex("BackBoneStepId");

                    b.HasIndex("MixerId");

                    b.HasIndex("SimulationPlannedId");

                    b.ToTable("MixerPlanneds");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.PlannedSKU", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Case_Shift")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LinePlannedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PlannedCases")
                        .HasColumnType("int");

                    b.Property<Guid>("SKUId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TimeToChangeSKUUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TimeToChangeSKUValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LinePlannedId");

                    b.HasIndex("SKUId");

                    b.ToTable("PlannedSKUs");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.ProcessFlowDiagram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MainProceses");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.SKU", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("EA_Case")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PackageType")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategory")
                        .HasColumnType("int");

                    b.Property<string>("SizeUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SizeValue")
                        .HasColumnType("float");

                    b.Property<string>("SkuCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeigthUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("WeigthValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("HCSKUs");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.SKULine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LineSpeedUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LineSpeedValue")
                        .HasColumnType("float");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("SKUId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("SKUId");

                    b.ToTable("SKULines");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.SimulationPlanned", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InitDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("InitSpam")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MainProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<double>("PlannedHours")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MainProcessId");

                    b.ToTable("SimulationPlanneds");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.Washout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LineWashoutTimeUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LineWashoutTimeValue")
                        .HasColumnType("float");

                    b.Property<string>("MixerWashoutTimeUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MixerWashoutTimeValue")
                        .HasColumnType("float");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategoryCurrent")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategoryNext")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Washouts");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.Identity.BlazorHeroUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureDataUrl")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.ContinuousSystem", b =>
                {
                    b.HasBaseType("Simulator.Server.Databases.Entities.HC.BaseEquipment");

                    b.Property<string>("FlowUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FlowValue")
                        .HasColumnType("float");

                    b.ToTable("ContinuousSystems");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.Line", b =>
                {
                    b.HasBaseType("Simulator.Server.Databases.Entities.HC.BaseEquipment");

                    b.Property<int>("PackageType")
                        .HasColumnType("int");

                    b.Property<string>("TimeToReviewAUUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TimeToReviewAUValue")
                        .HasColumnType("float");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.Mixer", b =>
                {
                    b.HasBaseType("Simulator.Server.Databases.Entities.HC.BaseEquipment");

                    b.ToTable("HCMixers");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.Operator", b =>
                {
                    b.HasBaseType("Simulator.Server.Databases.Entities.HC.BaseEquipment");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.Pump", b =>
                {
                    b.HasBaseType("Simulator.Server.Databases.Entities.HC.BaseEquipment");

                    b.Property<string>("FlowUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FlowValue")
                        .HasColumnType("float");

                    b.ToTable("Pumps");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.Tank", b =>
                {
                    b.HasBaseType("Simulator.Server.Databases.Entities.HC.BaseEquipment");

                    b.Property<string>("CapacityUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CapacityValue")
                        .HasColumnType("float");

                    b.Property<int>("FluidStorage")
                        .HasColumnType("int");

                    b.Property<string>("InitialLevelUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("InitialLevelValue")
                        .HasColumnType("float");

                    b.Property<bool>("IsStorageForOneFluid")
                        .HasColumnType("bit");

                    b.Property<string>("LoLoLevelUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LoLoLevelValue")
                        .HasColumnType("float");

                    b.Property<string>("MaxLevelUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaxLevelValue")
                        .HasColumnType("float");

                    b.Property<string>("MinLevelUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MinLevelValue")
                        .HasColumnType("float");

                    b.Property<int>("TankCalculationType")
                        .HasColumnType("int");

                    b.ToTable("Tanks");
                });

            modelBuilder.Entity("LineSKU", b =>
                {
                    b.HasOne("Simulator.Server.Databases.Entities.HC.Line", null)
                        .WithMany()
                        .HasForeignKey("LinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simulator.Server.Databases.Entities.HC.SKU", null)
                        .WithMany()
                        .HasForeignKey("SKUsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Simulator.Server.Databases.Entities.Identity.BlazorHeroUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Simulator.Server.Databases.Entities.Identity.BlazorHeroUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simulator.Server.Databases.Entities.Identity.BlazorHeroUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Simulator.Server.Databases.Entities.Identity.BlazorHeroUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.BackBoneStep", b =>
                {
                    b.HasOne("Simulator.Server.Databases.Entities.HC.Material", "HCMaterial")
                        .WithMany("BackBoneSteps")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simulator.Server.Databases.Entities.HC.Material", "RawMaterial")
                        .WithMany("RawMaterials")
                        .HasForeignKey("RawMaterialId");

                    b.Navigation("HCMaterial");

                    b.Navigation("RawMaterial");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.BaseEquipment", b =>
                {
                    b.HasOne("Simulator.Server.Databases.Entities.HC.ProcessFlowDiagram", "MainProcess")
                        .WithMany("ProccesEquipments")
                        .HasForeignKey("MainProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainProcess");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.Conector", b =>
                {
                    b.HasOne("Simulator.Server.Databases.Entities.HC.BaseEquipment", "From")
                        .WithMany("Froms")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Simulator.Server.Databases.Entities.HC.BaseEquipment", "To")
                        .WithMany("Tos")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.EquipmentPlannedDownTime", b =>
                {
                    b.HasOne("Simulator.Server.Databases.Entities.HC.BaseEquipment", "BaseEquipment")
                        .WithMany("PlannedDownTimes")
                        .HasForeignKey("BaseEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseEquipment");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.LinePlanned", b =>
                {
                    b.HasOne("Simulator.Server.Databases.Entities.HC.Line", "Line")
                        .WithMany("LinePlanneds")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Simulator.Server.Databases.Entities.HC.SimulationPlanned", "HCSimulationPlanned")
                        .WithMany("LinePlanneds")
                        .HasForeignKey("SimulationPlannedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HCSimulationPlanned");

                    b.Navigation("Line");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.MaterialEquipment", b =>
                {
                    b.HasOne("Simulator.Server.Databases.Entities.HC.Material", "Material")
                        .WithMany("ProcessEquipments")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Simulator.Server.Databases.Entities.HC.BaseEquipment", "ProccesEquipment")
                        .WithMany("Materials")
                        .HasForeignKey("ProccesEquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("ProccesEquipment");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.MixerPlanned", b =>
                {
                    b.HasOne("Simulator.Server.Databases.Entities.HC.Material", "BackBone")
                        .WithMany()
                        .HasForeignKey("BackBoneId");

                    b.HasOne("Simulator.Server.Databases.Entities.HC.BackBoneStep", "HCBackBoneStep")
                        .WithMany()
                        .HasForeignKey("BackBoneStepId");

                    b.HasOne("Simulator.Server.Databases.Entities.HC.Mixer", "Mixer")
                        .WithMany("MixerPlanneds")
                        .HasForeignKey("MixerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Simulator.Server.Databases.Entities.HC.SimulationPlanned", "SimulationPlanned")
                        .WithMany("MixerPlanneds")
                        .HasForeignKey("SimulationPlannedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BackBone");

                    b.Navigation("HCBackBoneStep");

                    b.Navigation("Mixer");

                    b.Navigation("SimulationPlanned");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.PlannedSKU", b =>
                {
                    b.HasOne("Simulator.Server.Databases.Entities.HC.LinePlanned", "LinePlanned")
                        .WithMany("SKUPlanneds")
                        .HasForeignKey("LinePlannedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Simulator.Server.Databases.Entities.HC.SKU", "SKU")
                        .WithMany("PlannedSKUs")
                        .HasForeignKey("SKUId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LinePlanned");

                    b.Navigation("SKU");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.SKU", b =>
                {
                    b.HasOne("Simulator.Server.Databases.Entities.HC.Material", "Material")
                        .WithMany("SKUs")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.SKULine", b =>
                {
                    b.HasOne("Simulator.Server.Databases.Entities.HC.Line", "Line")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simulator.Server.Databases.Entities.HC.SKU", "SKU")
                        .WithMany()
                        .HasForeignKey("SKUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("SKU");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.SimulationPlanned", b =>
                {
                    b.HasOne("Simulator.Server.Databases.Entities.HC.ProcessFlowDiagram", "MainProcess")
                        .WithMany("SimulationPlanneds")
                        .HasForeignKey("MainProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainProcess");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.BaseEquipment", b =>
                {
                    b.Navigation("Froms");

                    b.Navigation("Materials");

                    b.Navigation("PlannedDownTimes");

                    b.Navigation("Tos");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.LinePlanned", b =>
                {
                    b.Navigation("SKUPlanneds");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.Material", b =>
                {
                    b.Navigation("BackBoneSteps");

                    b.Navigation("ProcessEquipments");

                    b.Navigation("RawMaterials");

                    b.Navigation("SKUs");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.ProcessFlowDiagram", b =>
                {
                    b.Navigation("ProccesEquipments");

                    b.Navigation("SimulationPlanneds");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.SKU", b =>
                {
                    b.Navigation("PlannedSKUs");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.SimulationPlanned", b =>
                {
                    b.Navigation("LinePlanneds");

                    b.Navigation("MixerPlanneds");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.Line", b =>
                {
                    b.Navigation("LinePlanneds");
                });

            modelBuilder.Entity("Simulator.Server.Databases.Entities.HC.Mixer", b =>
                {
                    b.Navigation("MixerPlanneds");
                });
#pragma warning restore 612, 618
        }
    }
}
